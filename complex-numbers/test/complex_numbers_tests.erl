%% Based on canonical data version 1.3.0
%% https://github.com/exercism/problem-specifications/raw/master/exercises/complex-numbers/canonical-data.json
%% This file is automatically generated from the exercises canonical data.

-module(complex_numbers_tests).

-include_lib("erl_exercism/include/exercism.hrl").
-include_lib("eunit/include/eunit.hrl").




'1_real_part_of_a_purely_real_number_test'() ->
    ?assert(1 ==
	      complex_numbers:real(complex_numbers:new(1, 0))).

'2_real_part_of_a_purely_imaginary_number_test'() ->
    ?assert(0 ==
	      complex_numbers:real(complex_numbers:new(0, 1))).

'3_real_part_of_a_number_with_real_and_imaginary_part_test'() ->
    ?assert(1 ==
	      complex_numbers:real(complex_numbers:new(1, 2))).

'4_imaginary_part_of_a_purely_real_number_test'() ->
    ?assert(0 ==
	      complex_numbers:imaginary(complex_numbers:new(1, 0))).

'5_imaginary_part_of_a_purely_imaginary_number_test'() ->
    ?assert(1 ==
	      complex_numbers:imaginary(complex_numbers:new(0, 1))).

'6_imaginary_part_of_a_number_with_real_and_imaginary_part_test'() ->
    ?assert(2 ==
	      complex_numbers:imaginary(complex_numbers:new(1, 2))).

'7_imaginary_unit_test'() ->
    ?assert(complex_numbers:equal(complex_numbers:new(-1,
						      0),
				  complex_numbers:mul(complex_numbers:new(0, 1),
						      complex_numbers:new(0,
									  1)))).

'8_add_purely_real_numbers_test'() ->
    ?assert(complex_numbers:equal(complex_numbers:new(3, 0),
				  complex_numbers:add(complex_numbers:new(1, 0),
						      complex_numbers:new(2,
									  0)))).

'9_add_purely_imaginary_numbers_test'() ->
    ?assert(complex_numbers:equal(complex_numbers:new(0, 3),
				  complex_numbers:add(complex_numbers:new(0, 1),
						      complex_numbers:new(0,
									  2)))).

'10_add_numbers_with_real_and_imaginary_part_test'() ->
    ?assert(complex_numbers:equal(complex_numbers:new(4, 6),
				  complex_numbers:add(complex_numbers:new(1, 2),
						      complex_numbers:new(3,
									  4)))).

'11_subtract_purely_real_numbers_test'() ->
    ?assert(complex_numbers:equal(complex_numbers:new(-1,
						      0),
				  complex_numbers:sub(complex_numbers:new(1, 0),
						      complex_numbers:new(2,
									  0)))).

'12_subtract_purely_imaginary_numbers_test'() ->
    ?assert(complex_numbers:equal(complex_numbers:new(0,
						      -1),
				  complex_numbers:sub(complex_numbers:new(0, 1),
						      complex_numbers:new(0,
									  2)))).

'13_subtract_numbers_with_real_and_imaginary_part_test'() ->
    ?assert(complex_numbers:equal(complex_numbers:new(-2,
						      -2),
				  complex_numbers:sub(complex_numbers:new(1, 2),
						      complex_numbers:new(3,
									  4)))).

'14_multiply_purely_real_numbers_test'() ->
    ?assert(complex_numbers:equal(complex_numbers:new(2, 0),
				  complex_numbers:mul(complex_numbers:new(1, 0),
						      complex_numbers:new(2,
									  0)))).

'15_multiply_purely_imaginary_numbers_test'() ->
    ?assert(complex_numbers:equal(complex_numbers:new(-2,
						      0),
				  complex_numbers:mul(complex_numbers:new(0, 1),
						      complex_numbers:new(0,
									  2)))).

'16_multiply_numbers_with_real_and_imaginary_part_test'() ->
    ?assert(complex_numbers:equal(complex_numbers:new(-5,
						      10),
				  complex_numbers:mul(complex_numbers:new(1, 2),
						      complex_numbers:new(3,
									  4)))).

'17_divide_purely_real_numbers_test'() ->
    ?assert(complex_numbers:equal(complex_numbers:new(5.0e-1,
						      0),
				  complex_numbers:divide(complex_numbers:new(1,
									     0),
							 complex_numbers:new(2,
									     0)))).

'18_divide_purely_imaginary_numbers_test'() ->
    ?assert(complex_numbers:equal(complex_numbers:new(5.0e-1,
						      0),
				  complex_numbers:divide(complex_numbers:new(0,
									     1),
							 complex_numbers:new(0,
									     2)))).

'19_divide_numbers_with_real_and_imaginary_part_test'() ->
    ?assert(complex_numbers:equal(complex_numbers:new(4.4e-1,
						      8.0e-2),
				  complex_numbers:divide(complex_numbers:new(1,
									     2),
							 complex_numbers:new(3,
									     4)))).

'20_absolute_value_of_a_positive_purely_real_number_test'() ->
    ?assert(5 ==
	      complex_numbers:abs(complex_numbers:new(5, 0))).

'21_absolute_value_of_a_negative_purely_real_number_test'() ->
    ?assert(5 ==
	      complex_numbers:abs(complex_numbers:new(-5, 0))).

'22_absolute_value_of_a_purely_imaginary_number_with_positive_imaginary_part_test'() ->
    ?assert(5 ==
	      complex_numbers:abs(complex_numbers:new(0, 5))).

'23_absolute_value_of_a_purely_imaginary_number_with_negative_imaginary_part_test'() ->
    ?assert(5 ==
	      complex_numbers:abs(complex_numbers:new(0, -5))).

'24_absolute_value_of_a_number_with_real_and_imaginary_part_test'() ->
    ?assert(5 ==
	      complex_numbers:abs(complex_numbers:new(3, 4))).

'25_conjugate_a_purely_real_number_test'() ->
    ?assert(complex_numbers:equal(complex_numbers:new(5, 0),
				  complex_numbers:conjugate(complex_numbers:new(5,
										0)))).

'26_conjugate_a_purely_imaginary_number_test'() ->
    ?assert(complex_numbers:equal(complex_numbers:new(0,
						      -5),
				  complex_numbers:conjugate(complex_numbers:new(0,
										5)))).

'27_conjugate_a_number_with_real_and_imaginary_part_test'() ->
    ?assert(complex_numbers:equal(complex_numbers:new(1,
						      -1),
				  complex_numbers:conjugate(complex_numbers:new(1,
										1)))).

'28_eulers_identityformula_test'() ->
    ?assert(complex_numbers:equal(complex_numbers:new(-1,
						      0),
				  complex_numbers:exp(complex_numbers:new(0,
									  3.14159265358979311600)))).

'29_exponential_of_0_test'() ->
    ?assert(complex_numbers:equal(complex_numbers:new(1, 0),
				  complex_numbers:exp(complex_numbers:new(0,
									  0)))).

'30_exponential_of_a_purely_real_number_test'() ->
    ?assert(complex_numbers:equal(complex_numbers:new(2.71828182845904509080,
						      0),
				  complex_numbers:exp(complex_numbers:new(1,
									  0)))).

'31_exponential_of_a_number_with_real_and_imaginary_part_test'() ->
    ?assert(complex_numbers:equal(complex_numbers:new(-2,
						      0),
				  complex_numbers:exp(complex_numbers:new(6.93147180559945286227e-1,
									  3.14159265358979311600)))).
