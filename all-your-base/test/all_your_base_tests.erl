%% Based on canonical data version 2.3.0
%% https://github.com/exercism/problem-specifications/raw/master/exercises/all-your-base/canonical-data.json
%% This file is automatically generated from the exercises canonical data.

-module(all_your_base_tests).

-include_lib("erl_exercism/include/exercism.hrl").
-include_lib("eunit/include/eunit.hrl").




'1_single_bit_one_to_decimal_test'() ->
    ?assertMatch({ok, [1]},
		 all_your_base:rebase([1], 2, 10)).

'2_binary_to_single_decimal_test'() ->
    ?assertMatch({ok, [5]},
		 all_your_base:rebase([1, 0, 1], 2, 10)).

'3_single_decimal_to_binary_test'() ->
    ?assertMatch({ok, [1, 0, 1]},
		 all_your_base:rebase([5], 10, 2)).

'4_binary_to_multiple_decimal_test'() ->
    ?assertMatch({ok, [4, 2]},
		 all_your_base:rebase([1, 0, 1, 0, 1, 0], 2, 10)).

'5_decimal_to_binary_test'() ->
    ?assertMatch({ok, [1, 0, 1, 0, 1, 0]},
		 all_your_base:rebase([4, 2], 10, 2)).

'6_trinary_to_hexadecimal_test'() ->
    ?assertMatch({ok, [2, 10]},
		 all_your_base:rebase([1, 1, 2, 0], 3, 16)).

'7_hexadecimal_to_trinary_test'() ->
    ?assertMatch({ok, [1, 1, 2, 0]},
		 all_your_base:rebase([2, 10], 16, 3)).

'8_15_bit_integer_test'() ->
    ?assertMatch({ok, [6, 10, 45]},
		 all_your_base:rebase([3, 46, 60], 97, 73)).

'9_empty_list_test'() ->
    ?assertMatch({ok, [0]},
		 all_your_base:rebase([], 2, 10)).

'10_single_zero_test'() ->
    ?assertMatch({ok, [0]},
		 all_your_base:rebase([0], 10, 2)).

'11_multiple_zeros_test'() ->
    ?assertMatch({ok, [0]},
		 all_your_base:rebase([0, 0, 0], 10, 2)).

'12_leading_zeros_test'() ->
    ?assertMatch({ok, [4, 2]},
		 all_your_base:rebase([0, 6, 0], 7, 10)).

'13_input_base_is_one_test'() ->
    ?assertMatch({error, "input base must be >= 2"},
		 all_your_base:rebase([0], 1, 10)).

'14_input_base_is_zero_test'() ->
    ?assertMatch({error, "input base must be >= 2"},
		 all_your_base:rebase([], 0, 10)).

'15_input_base_is_negative_test'() ->
    ?assertMatch({error, "input base must be >= 2"},
		 all_your_base:rebase([1], -2, 10)).

'16_negative_digit_test'() ->
    ?assertMatch({error,
		  "all digits must satisfy 0 <= d < input "
		  "base"},
		 all_your_base:rebase([1, -1, 1, 0, 1, 0], 2, 10)).

'17_invalid_positive_digit_test'() ->
    ?assertMatch({error,
		  "all digits must satisfy 0 <= d < input "
		  "base"},
		 all_your_base:rebase([1, 2, 1, 0, 1, 0], 2, 10)).

'18_output_base_is_one_test'() ->
    ?assertMatch({error, "output base must be >= 2"},
		 all_your_base:rebase([1, 0, 1, 0, 1, 0], 2, 1)).

'19_output_base_is_zero_test'() ->
    ?assertMatch({error, "output base must be >= 2"},
		 all_your_base:rebase([7], 10, 0)).

'20_output_base_is_negative_test'() ->
    ?assertMatch({error, "output base must be >= 2"},
		 all_your_base:rebase([1], 2, -7)).

'21_both_bases_are_negative_test'() ->
    ?assertMatch({error, "input base must be >= 2"},
		 all_your_base:rebase([1], -2, -7)).
